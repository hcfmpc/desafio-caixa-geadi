# ===========================================================
# Start API .NET + DB Server - API local + Banco servidor
# ===========================================================
# Inicializa√ß√£o para servidor: API local, banco configurado
# ===========================================================

param()

Write-Host "=======================================================" -ForegroundColor Green
Write-Host "üéØ INICIALIZA√á√ÉO SERVIDOR - API .NET + DB SERVER" -ForegroundColor Green
Write-Host "=======================================================" -ForegroundColor Green

# Garantir que estamos na pasta raiz do projeto
Push-Location "$PSScriptRoot\.."

# ETAPA 1: Verificar depend√™ncias
Write-Host "üìã ETAPA 1: Verificando depend√™ncias..." -ForegroundColor Yellow

$dotnetOK = $false
try {
    $dotnetVersion = dotnet --version 2>$null
    if ($dotnetVersion) {
        $dotnetOK = $true
        Write-Host "   ‚úÖ .NET SDK: $dotnetVersion" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ùå .NET SDK n√£o encontrado" -ForegroundColor Red
    Write-Host "   üì• Instale: https://dotnet.microsoft.com/download/dotnet/8.0" -ForegroundColor Cyan
    exit 1
}

# ETAPA 2: Configurar ambiente
Write-Host "`nüîß ETAPA 2: Configurando ambiente..." -ForegroundColor Yellow

if (-not (Test-Path ".env")) {
    Write-Host "   üîÑ Criando configura√ß√£o .env..." -ForegroundColor Cyan
    .\Scripts\setup-env.ps1
} else {
    Write-Host "   ‚úÖ Arquivo .env j√° configurado" -ForegroundColor Green
}

# ETAPA 3: Verificar configura√ß√£o de conex√£o
Write-Host "`nüîó ETAPA 3: Verificando conex√£o com banco..." -ForegroundColor Yellow

# Ler string de conex√£o do appsettings
$appsettingsPath = "ControleArquivosGEADI.API/appsettings.json"
if (Test-Path $appsettingsPath) {
    $appsettings = Get-Content $appsettingsPath | ConvertFrom-Json
    $connectionString = $appsettings.ConnectionStrings.DefaultConnection
    
    if ($connectionString -and $connectionString -ne "Server=localhost,1433;Database=DBGEADI;User Id=sa;Password=Ge@di2024;TrustServerCertificate=True;") {
        Write-Host "   ‚úÖ String de conex√£o customizada detectada" -ForegroundColor Green
        Write-Host "   üìã Servidor: $(($connectionString -split ';')[0] -replace 'Server=','')" -ForegroundColor Cyan
        
        # Testar conex√£o
        Write-Host "   üß™ Testando conectividade..." -ForegroundColor Cyan
        try {
            $connection = New-Object System.Data.SqlClient.SqlConnection
            $connection.ConnectionString = $connectionString
            $connection.Open()
            $connection.Close()
            Write-Host "   ‚úÖ Conex√£o com banco bem-sucedida!" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Erro de conex√£o: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "`n   üí° Verifique:" -ForegroundColor Yellow
            Write-Host "      ‚Ä¢ Servidor SQL dispon√≠vel" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Credenciais corretas em appsettings.json" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Firewall/rede permitindo conex√£o" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Banco DBGEADI criado no servidor" -ForegroundColor Gray
            exit 1
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  String de conex√£o padr√£o (localhost) detectada" -ForegroundColor Yellow
        Write-Host "   üìù Para servidor, edite appsettings.json:" -ForegroundColor Cyan
        Write-Host '      "Server=SEU_SERVIDOR;Database=DBGEADI;User Id=SEU_USER;Password=SUA_SENHA;TrustServerCertificate=True;"' -ForegroundColor Gray
        
        $response = Read-Host "`n   ü§î Continuar mesmo assim? (s/n)"
        if ($response -ne "s" -and $response -ne "S") {
            Write-Host "   üõë Execu√ß√£o cancelada pelo usu√°rio" -ForegroundColor Red
            exit 0
        }
    }
} else {
    Write-Host "   ‚ùå appsettings.json n√£o encontrado" -ForegroundColor Red
    exit 1
}

# ETAPA 4: Verificar e instalar EF Tools
Write-Host "`nüîß ETAPA 4: Verificando EF Tools..." -ForegroundColor Yellow
try {
    dotnet ef --version > $null 2>&1
    Write-Host "   ‚úÖ EF Tools j√° instalado" -ForegroundColor Green
} catch {
    Write-Host "   üîÑ Instalando EF Tools..." -ForegroundColor Cyan
    dotnet tool install --global dotnet-ef > $null 2>&1
    Write-Host "   ‚úÖ EF Tools instalado" -ForegroundColor Green
}

# ETAPA 5: Aplicar migrations
Write-Host "`nüìä ETAPA 5: Aplicando migrations..." -ForegroundColor Yellow
try {
    Push-Location "ControleArquivosGEADI.API"
    $migrationOutput = dotnet ef database update 2>&1
    Pop-Location
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Migrations aplicadas com sucesso" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erro nas migrations:" -ForegroundColor Red
        Write-Host "   $migrationOutput" -ForegroundColor Gray
        Write-Host "`n   üí° Poss√≠veis solu√ß√µes:" -ForegroundColor Yellow
        Write-Host "      ‚Ä¢ Verificar se o banco DBGEADI existe" -ForegroundColor Gray
        Write-Host "      ‚Ä¢ Confirmar permiss√µes do usu√°rio no servidor" -ForegroundColor Gray
        Write-Host "      ‚Ä¢ Validar string de conex√£o" -ForegroundColor Gray
        exit 1
    }
} catch {
    Pop-Location
    Write-Host "   ‚ùå Erro nas migrations: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# ETAPA 6: Iniciar API local
Write-Host "`nüöÄ ETAPA 6: Iniciando API local..." -ForegroundColor Yellow
Write-Host "   üîÑ Compilando e iniciando aplica√ß√£o..." -ForegroundColor Cyan

# Iniciar API em background
$apiJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD
    Push-Location "ControleArquivosGEADI.API"
    dotnet run --urls "http://localhost:8080"
    Pop-Location
}

Write-Host "   ‚úÖ API iniciando em background (Job ID: $($apiJob.Id))" -ForegroundColor Green

# ETAPA 7: Aguardar API responder
Write-Host "`nüß™ ETAPA 7: Testando aplica√ß√£o..." -ForegroundColor Yellow
Write-Host "   ‚è≥ Aguardando API responder (max 30s)..." -ForegroundColor Cyan

$apiReady = $false
$apiTimeout = 30
$apiElapsed = 0

while ($apiElapsed -lt $apiTimeout -and -not $apiReady) {
    Start-Sleep 3
    $apiElapsed += 3
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:8080/arquivos" -Method GET -TimeoutSec 5
        $apiReady = $true
        Write-Host "   ‚úÖ API respondendo em $apiElapsed segundos!" -ForegroundColor Green
    }
    catch {
        Write-Host "." -NoNewline -ForegroundColor Gray
    }
}

if (-not $apiReady) {
    Write-Host "`n   ‚ö†Ô∏è  API ainda inicializando... aguarde alguns segundos" -ForegroundColor Yellow
}

# ETAPA 8: Validar conectividade banco via API
Write-Host "`nüíæ ETAPA 8: Validando integra√ß√£o banco..." -ForegroundColor Yellow
try {
    $lotes = Invoke-RestMethod -Uri "http://localhost:8080/lotes" -Method GET -TimeoutSec 10
    Write-Host "   ‚úÖ API conectada ao banco com sucesso!" -ForegroundColor Green
    Write-Host "   üìä Lotes encontrados: $($lotes.Count)" -ForegroundColor Cyan
} catch {
    Write-Host "   ‚ö†Ô∏è  Erro na consulta ao banco via API" -ForegroundColor Yellow
    Write-Host "   üìã Motivos poss√≠veis: migrations pendentes, permiss√µes, conectividade" -ForegroundColor Gray
}

# ETAPA 9: Abrir Swagger
Write-Host "`nüìñ ETAPA 9: Abrindo documenta√ß√£o..." -ForegroundColor Yellow
try {
    Start-Process "http://localhost:8080/swagger"
    Write-Host "   ‚úÖ Swagger aberto no navegador" -ForegroundColor Green
} catch {
    Write-Host "   üìã Acesse manualmente: http://localhost:8080/swagger" -ForegroundColor Cyan
}

Pop-Location

Write-Host "`n=======================================================" -ForegroundColor Green
Write-Host "üéØ APLICA√á√ÉO SERVIDOR INICIALIZADA!" -ForegroundColor Green
Write-Host "=======================================================" -ForegroundColor Green
Write-Host "üåê API (.NET): http://localhost:8080" -ForegroundColor Cyan
Write-Host "üìñ Swagger: http://localhost:8080/swagger" -ForegroundColor Cyan
Write-Host "üóÑÔ∏è SQL Server: Configurado via appsettings.json" -ForegroundColor Cyan
Write-Host "üîß Debug: API rodando local com hot reload" -ForegroundColor Cyan
Write-Host "`nüí° Para parar a API: Get-Job | Stop-Job" -ForegroundColor Yellow
Write-Host "üîß Para editar conex√£o: appsettings.json" -ForegroundColor Yellow
Write-Host "=======================================================" -ForegroundColor Green
